name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  PG_DATABASE: edu_learn
  PG_USER: ${{ secrets.PG_USER }}
  PG_PASSWORD: ${{secrets.PG_PASSWORD}}
  SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
  ALLOWED_HOSTS: localhost,127.0.0.1
  DEBUG: True
  SECRET_KEY: ${{secrets.SECRET_KEY}}
  DATABASE_URL: ${{secrets.DATABASE_URL}}

jobs:
  run-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: edu_learn
          # DATABASE_URL: ${{secrets.DATABASE_URL}}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install python-dotenv
        run: pip install python-dotenv

      - name: Run tests
        run: |
          python manage.py test

      # Notify on Slack regardless of the outcome
      - name: Slack Notify
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status}}
          steps: ${{toJson(steps)}}
          channel: "#web-development"
        if: always()

      # Notify on Slack for success
      - name: Success Notify
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Commit has been successful✅"}' ${{secrets.SLACK_WEBHOOK_URL}}

      # Notify on Slack for failure
      - name: Failure Notify
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"⚠️Error: The pipeline has failed❗"}' ${{secrets.SLACK_WEBHOOK_URL}}

  docker:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image

        run: docker build . --file ./Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/edulearn-backend

      - name: Docker Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/edulearn-backend

  # Deploy to production
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      # Deploy to Production using Render
      - name: Deploy to Production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID}}
          api-key: ${{ secrets.RENDER_API_KEY}}
